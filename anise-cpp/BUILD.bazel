# # demo/BUILD.bazel

# # Load the cxx bridge rule provided by the cxx crate itself
# load("@crates//:cxx.bzl", "cxx_bridge")

# # Load the standard C++ and Rust rules
# load("@rules_cc//cc:defs.bzl", "cc_library")
# load("@rules_rust//rust:defs.bzl", "rust_binary")

# # This is your final, runnable program.
# rust_binary(
#     name = "demo",
#     srcs = ["src/main.rs"],  # Being specific is often better than glob
#     deps = [
#         # This depends on the C++ library implementation
#         ":blobstore_lib",
#         # And on the Rust side of the cxx crate
#         "@crates//:cxx",
#     ],
# )

# # This rule from the cxx crate generates the C++/Rust bridge code.
# # It creates two targets automatically:
# # 1. :bridge (a rust_library for the Rust side)
# # 2. :bridge_cxx (a cc_library for the C++ side)
# cxx_bridge(
#     name = "bridge",
#     src = "src/main.rs",
# )

# # This is the C++ library that implements the functions declared
# # in the header file.
# cc_library(
#     name = "blobstore_lib",
#     srcs = ["cpp/src/blobstore.cpp"],  # Corrected from .cc to .cpp
#     hdrs = ["cpp/include/blobstore.h"],
#     # It needs the generated C++ headers from the bridge.
#     deps = [
#         ":bridge_cxx",
#     ],
# )

# demo/BUILD.bazel

load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_rust//rust:defs.bzl", "rust_binary")
load("//:rust_cxx_bridge.bzl", "rust_cxx_bridge")

rust_binary(
    name = "demo",
    srcs = ["src/main.rs"],
    deps = [
        ":blobstore-sys",
        ":bridge",
        "//:cxx",
    ],
)

rust_cxx_bridge(
    name = "bridge",
    src = "src/main.rs",
    deps = [":blobstore-include"],
)

cc_library(
    name = "blobstore-sys",
    srcs = ["cpp/src/blobstore.cpp"],
    deps = [
        ":blobstore-include",
        ":bridge/include",
    ],
)

cc_library(
    name = "blobstore-include",
    hdrs = ["cpp/include/blobstore.h"],
    deps = ["bridge"],
)
